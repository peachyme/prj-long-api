generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(uuid())
  username            String         @unique
  email               String         @unique
  password            String
  role                Role
  emailVerified       Boolean        @default(false)
  verificationToken   String         @db.VarChar(200) @unique
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  offreur       Offreur?
  demandeur     Demandeur?

  accessTokens  AccessToken[]
}

model AccessToken {
  id          String   @id @unique @default(uuid())
  token       String   @db.VarChar(200) @unique
  userId      String
  revoked     Boolean  @default(false)
  
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Demandeur {
  id        Int @id @default(autoincrement())
  fname     String
  lname     String
  phone     String @unique
  email     String @unique
  address   String
  country   String
  city      String
  zip       String
  demandes  Demande[]
  projets   Projet[]
  evaluations   Evaluation[] 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User @relation(fields: [userId], references: [id])
  userId    String @unique
}

model Offreur {
  id            Int @id @default(autoincrement())
  fname         String
  lname         String
  apropos       String @db.LongText
  phone         String @unique
  email         String @unique
  address       String
  country       String
  city          String
  zip           String
  experiences   Experience[]
  skills        OffreurSkill[]
  evaluations   Evaluation[]
  demandes      Demande[]
  projets       Projet[]
  projetsMembre MembreProjet[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user          User @relation(fields: [userId], references: [id])
  userId        String @unique
}

model Skill {
  id        Int @id @default(autoincrement())
  label     String
  offreurs  OffreurSkill[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OffreurSkill {
  offreurId Int 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  offreur   Offreur @relation(fields: [offreurId], references: [id])

  skillId   Int
  skill     Skill @relation(fields: [skillId], references: [id])

  level     Int
  @@id([offreurId, skillId])
}

model Experience {
  id          Int @id @default(autoincrement())
  title       String
  description String @db.LongText
  link        String
  from        String
  to          String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  offreur     Offreur @relation(fields: [offreurId], references: [id])
  offreurId    Int
}

model Evaluation {
  id          Int @id @default(autoincrement())
  note        Int
  commentaire String @db.LongText
  date        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  offreur     Offreur @relation(fields: [offreurId], references: [id])
  offreurId    Int

  demandeur     Demandeur @relation(fields: [demandeurId], references: [id], onDelete: Cascade) 
  demandeurId    Int
}

model Projet {
  id          Int @id @default(autoincrement())
  title       String
  description String @db.LongText
  cc          String
  duree       Int
  date_deb    DateTime
  date_fin    DateTime
  etat        String
  taches      Tache[]
  membres     MembreProjet[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  offreur     Offreur @relation(fields: [offreurId], references: [id])
  offreurId   Int
  
  demandeur   Demandeur @relation(fields: [demandeurId], references: [id])
  demandeurId Int
}

model MembreProjet {
  offreurId Int 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  offreur   Offreur @relation(fields: [offreurId], references: [id])

  projetId  Int
  projet    Projet @relation(fields: [projetId], references: [id])

  level     Int
  @@id([offreurId, projetId])
}

model Tache {
  id          Int @id @default(autoincrement())
  title       String
  description String @db.LongText
  Statut      State @default(inProgess)
  date_debut  DateTime
  date_fin    DateTime
  duree       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  projet      Projet @relation(fields: [projetId], references: [id])
  projetId    Int
}

model Demande {
  id            Int @id @default(autoincrement())
  title         String
  description   String @db.LongText
  etat          Etat  @default(envoyee)
  motif_refus   String? @db.LongText
  motif_annulation   String? @db.LongText
  date_emission DateTime @default(now())
  cc            String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  facture       Facture?

  rdv           Rdv?

  offreur     Offreur @relation(fields: [offreurId], references: [id])
  offreurId    Int

  demandeur     Demandeur @relation(fields: [demandeurId], references: [id]) 
  demandeurId    Int
}

model Rdv {
  id Int @id @default(autoincrement())
  type Type
  heure String
  date String
  address String?
  link String?

  demande          Demande @relation(fields: [demandeId], references: [id])
  demandeId        Int @unique
}

model Facture {
  id              Int @id @default(autoincrement())
  montant         Int
  date_generation DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  demande         Demande @relation(fields: [demandeId], references: [id])
  demandeId       Int @unique
}

enum Role {
  offreur
  demandeur
}


enum State {
  done
  inProgess
  onHold
  nextUp
}

enum Etat {
  envoyee
  enCoursDeTraitement
  acceptee
  refusee
  confirmee
  annulee
}

enum Type {
  visio
  presentiel
}